{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Fragment","React","Card","id","name","email","className","alt","src","CardList","robots","cardComponent","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","e","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCjBAC,EAAWC,IAAMD,SAEVE,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAChC,OACC,kBAACL,EAAD,KACC,yBAAKM,UAAU,kEACd,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BL,EAA1B,cACzB,6BACC,4BAAKC,GACL,2BAAIC,OCRHL,EAAWC,IAAMD,SAEVS,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBC,EAAgBD,EAAOE,KAAI,SAACC,EAAOC,GAAR,OAAc,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGX,GAAIA,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WACjI,OACC,kBAAC,EAAD,KACC,6BAAMM,KCPHX,EAAWC,IAAMD,SAEVgB,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3B,OACC,kBAAC,EAAD,KACC,yBAAKX,UAAU,OACd,2BAAOA,UAAU,iDAAiDY,KAAK,SAASC,YAAY,gBAAgBC,SAAWH,OCNrHjB,EAAWC,IAAMD,SAEVqB,EAAS,SAACC,GACnB,OACI,kBAAC,EAAD,KACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,mBAAoBC,OAAQ,UACjEJ,EAAMK,YCLVC,G,MAAb,YACC,WAAYN,GAAQ,IAAD,8BAClB,+CACKO,MAAQ,CACZC,UAAU,GAHO,EADpB,+EAOmBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,MAR5B,+BAWE,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,aAdpB,GAAmCQ,cCI7BnC,EAAWC,IAAMD,SAEVoC,EAAb,YACC,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAAAC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAEE,OAAOC,SAbtC,EAAKZ,MAAQ,CACZnB,OAAQ,GACR6B,YAAa,IAJD,EADf,iFAQsB,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAAExB,OAAQoC,SAZ5B,+BAkBW,IAAD,EACwBb,KAAKJ,MAArBU,GADR,EACA7B,OADA,EACQ6B,aACVQ,EAAiBd,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAnC,GAAK,OAAIA,EAAMT,KAAK6C,cAAcC,SAASX,EAAYU,kBAEvG,OACC,kBAAC,EAAD,KACC,yBAAK3C,UAAU,MACd,6CACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQqC,YA7BzB,GAAyBZ,aCDzBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,iB","file":"static/js/main.8e41c4f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nconst Fragment = React.Fragment;\n\nexport const Card = ({ id, name, email }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"tc bg-moon-gray dib br4 pa2 ma2 grow ba b--yellow bw2 shadow-3\">\n\t\t\t\t<img alt=\"robots-pic\" src={`https://robohash.org/${id}?200x200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n","import React from \"react\";\nimport { Card } from \"./Card\";\nconst Fragment = React.Fragment;\n\nexport const CardList = ({ robots }) => {\n\tconst cardComponent = robots.map((robot, i) => <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />);\n\treturn (\n\t\t<Fragment>\n\t\t\t<div>{cardComponent}</div>\n\t\t</Fragment>\n\t);\n};\n","import React from \"react\";\nconst Fragment = React.Fragment;\n\nexport const SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"pa2\">\n\t\t\t\t<input className=\"pa2 bg-moon-gray ba b--yellow br2 bw2 shadow-3\" type=\"search\" placeholder=\"search robots\" onChange ={searchChange} />\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n","import React from \"react\";\nconst Fragment = React.Fragment;\n\nexport const Scroll = (props) => {\n    return (\n        <Fragment>\n            <div style={{overflowY: 'scroll', border: '4px solid yellow', height: '450px'}}>\n                {props.children}\n            </div>\n        </Fragment>\n    );\n}","import React, { Component } from \"react\";\n\nexport class ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h2>There's been an error...</h2>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n","import React, { Component } from \"react\";\nimport { CardList } from \"../components/CardList\";\nimport { SearchBox } from \"../components/SearchBox\";\nimport { Scroll } from \"../components/Scroll\";\nimport \"./App.css\";\nimport { ErrorBoundary } from \"../components/ErrorBoundary\";\nconst Fragment = React.Fragment;\n\nexport class App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: \"\"\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => {\n\t\t\t\tthis.setState({ robots: users });\n\t\t\t});\n\t}\n\tonSearchChange = e => {\n\t\tthis.setState({ searchfield: e.target.value });\n\t};\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\n\t\t// console.log(filteredRobots);\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1>Robot Friends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport { App } from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<h1>Robo Friends App</h1>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}